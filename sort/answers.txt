sort1 uses:  Bubble sort

How do you know?:


reversed 5000    real 0.79s
reversed 10000   real 0.211s
reversed 50000   real 5.542s

sorted 5000      0.031s
sorted 10000     0.007s
sorted 50000     0.0941s

random 5000      0.055s
random 10000     0.173s
random 50000     6.055s

Because Bubble sort takes long time compared to merge and selection sort. Additionally, there is a big difference
between the best case (Omega(n)) and worse case (O notation(n)).

sort2 uses: Merge sort

How do you know?:

reversed 5000   0.018s
reversed 10000  0.046s
reversed 50000  1.100s

sorted 5000     0.026s
sorted 10000    0.036s
sorted 50000    0.712s

random 5000     0.018s
random 10000    0.044s
random 50000    1.078s

Because the best case (Omega(n)) and worse case (O notation(n)) of the secelction sort are nearly the same.
That is why we see the time of reversed50000, sorted50000, and random50000 are nearly equal. And take less time than selection and bubble sort.

sort3 uses: Selection sort

How do you know?:

reversed 5000     0.061s
reversed 10000    0.133s
reversed 50000    2.883s

sorted 5000       0.035s
sorted 10000      0.107s
sorted 50000      2.798s

random 5000       0.062s
random 10000      0.162s
random 50000      2.831s

Because the best case (Omega(n)) and worse case (O notation(n)) of the secelction sort are nearly the same.
That is why we see the time of reversed50000, sorted50000, and random50000 are nearly equal. And take more time than merge sort.